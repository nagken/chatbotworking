name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: pss-knowledge-assist
  REGION: us-central1

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run basic tests
      run: |
        python -c "import app.main; print('✅ App imports successfully')"
        python -c "from app.main import app; print('✅ FastAPI app created successfully')"
    
    - name: Test Docker build
      run: |
        docker build -t test-pss-knowledge-assist .
        echo "✅ Docker build successful"

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker
    
    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .
    
    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars="LOG_LEVEL=INFO,ENVIRONMENT=production,DEBUG_MODE=false" \
          --quiet
    
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🌐 Service deployed at: $SERVICE_URL"
    
    - name: Test deployment
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Test health endpoint
        if curl -f -s "${{ steps.get-url.outputs.SERVICE_URL }}/api/health"; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        # Test main page
        if curl -f -s "${{ steps.get-url.outputs.SERVICE_URL }}/" | grep -q "PSS Knowledge Assist"; then
          echo "✅ Main page is working"
        else
          echo "❌ Main page test failed"
          exit 1
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚀 **Deployment Preview Ready!**
            
            📍 **URL**: ${{ steps.get-url.outputs.SERVICE_URL }}
            📋 **Health Check**: ${{ steps.get-url.outputs.SERVICE_URL }}/api/health
            🧪 **Quick Test**: ${{ steps.get-url.outputs.SERVICE_URL }}/quick-test
            
            This preview will be available until the next deployment.`
          })
    
    - name: Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Application URL: ${{ steps.get-url.outputs.SERVICE_URL }}"
        echo "📊 View logs: gcloud logs read 'resource.type=cloud_run_revision' --limit 100"
        echo "📈 Monitor: https://console.cloud.google.com/run/detail/$REGION/$SERVICE_NAME"
